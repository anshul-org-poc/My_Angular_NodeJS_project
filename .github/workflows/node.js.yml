# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "dev", "uat", "prod" ]
  pull_request:
    branches: [ "dev", "uat", "prod" ]

env:
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }} # Replace with your Azure SP credentials in GitHub secrets
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}   # Replace with your AKS cluster name in GitHub secrets
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }} # Replace with your AKS resource group in GitHub secrets
  REGISTRY_NAME: ${{ secrets.REGISTRY_NAME }}         # Replace with your Azure Container Registry name in GitHub secrets
  IMAGE_NAME: nodejs-app                              # Replace with your desired Docker image name

jobs:
  build:
    runs-on: self-hosted # Use a self-hosted runner with Docker and Node.js installed

    environment:
      name: ${{ github.ref_name }}

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci
    
    - name: Build Application
      run: npm run build --if-present # Replace `npm run build` with your actual build command if different
    
    - name: Run Tests
      run: npm test                   # Replace `npm test` with your actual test command if different
      if: always()

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }} # Replace with ACR username in GitHub secrets
        password: ${{ secrets.ACR_PASSWORD }} # Replace with ACR password in GitHub secrets

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build
    runs-on: self-hosted

    environment:
      name: ${{ github.ref_name }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS Context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ env.AKS_CLUSTER_NAME }}

    - name: Create Namespace (if it doesn't exist)
      run: |
        kubectl create namespace ${{ github.ref_name }} || echo "Namespace already exists"

    - name: Deploy to AKS
      uses: azure/k8s-deploy@v4
      with:
        namespace: ${{ github.ref_name }} # Uses branch name as namespace
        manifests: |
          k8s/deployment.yaml             # Replace with the path to your deployment YAML file
          k8s/service.yaml                # Replace with the path to your service YAML file
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
